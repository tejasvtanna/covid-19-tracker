{"version":3,"sources":["App.js","index.js"],"names":["App","useState","summary","setSummary","countryData","setcountryData","inputCountry","setInputCountry","inputContinent","setInputContinent","useEffect","a","axios","get","res","data","fetchData","fetchCountryData","date","Date","parseInt","updated","lastUpdated","toLocaleDateString","toLocaleTimeString","filteredCountries","filter","d","country","toUpperCase","includes","continent","sort","b","deaths","countryCards","map","idx","Card","key","bg","text","className","style","margin","Header","Img","src","countryInfo","flag","variant","Body","Text","cases","todayCases","recovered","active","critical","toFixed","textAlign","CardDeck","Title","Footer","Form","Row","Col","Control","column","sm","type","onChange","e","target","value","placeholder","length","queries","columns","query","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11fd7407.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { Card, CardDeck } from 'react-bootstrap'\nimport { Form, Row, Col } from 'react-bootstrap'\nimport Columns from 'react-columns'\nimport axios from 'axios'\n\nconst App = () => {\n   const [summary, setSummary] = useState([])\n   const [countryData, setcountryData] = useState([])\n   const [inputCountry, setInputCountry] = useState('')\n   const [inputContinent, setInputContinent] = useState('')\n\n   // useEffect(() => {\n   //    axios\n   //       .get('https://corona.lmao.ninja/v2/all')\n   //       .then((res) => setSummary(res.data))\n   //       .catch((err) => console.log(err))\n   // }, [])\n\n   useEffect(() => {\n      async function fetchData() {\n         const res = await axios.get('https://corona.lmao.ninja/v2/all')\n         setSummary(res.data)\n      }\n\n      async function fetchCountryData() {\n         const res = await axios.get(\n            `https://corona.lmao.ninja/v2/countries/${inputCountry}`\n         )\n         setcountryData(res.data)\n      }\n\n      // alert()\n      fetchData()\n      fetchCountryData()\n   }, [])\n\n   function numberWithCommas(x) {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n   }\n\n   // console.log('Summary', summary)\n   const date = new Date(parseInt(summary.updated))\n   const lastUpdated =\n      date.toLocaleDateString() + ' ' + date.toLocaleTimeString()\n\n   let filteredCountries = countryData.filter((d) => {\n      if (inputCountry === '') return true\n      else return d.country.toUpperCase().includes(inputCountry)\n   })\n\n   filteredCountries = filteredCountries.filter((d) => {\n      if (inputContinent === '') return true\n      else return d.continent.toUpperCase().includes(inputContinent)\n   })\n\n   // filteredCountries = filteredCountries.sort\n   filteredCountries.sort((a, b) =>\n      a.deaths > b.deaths ? 1 : b.deaths > a.deaths ? -1 : 0\n   )\n\n   const countryCards = filteredCountries.map((data, idx) => (\n   <Card\n         key={idx}\n         bg='light'\n         text='dark'\n         className='text-center'\n         style={{ margin: '10px' }}\n      >\n         <Card.Header>{data.country}</Card.Header>\n         <Card.Img src={data.countryInfo.flag} variant='top'></Card.Img>\n         <Card.Body>\n            <Card.Text>\n               <b>Total Cases:</b> {data.cases}\n            </Card.Text>\n            <Card.Text>\n               <b>Today's Cases:</b> {data.todayCases}\n            </Card.Text>\n            <Card.Text>\n               <b>Deaths Cases:</b> {data.deaths}\n            </Card.Text>\n            <Card.Text>\n               <b>Recovered Cases:</b> {data.recovered}\n            </Card.Text>\n            <Card.Text>\n               <b>Active:</b> {data.active}\n            </Card.Text>\n            <Card.Text>\n               <b>Critical:</b> {data.critical}\n            </Card.Text>\n            <Card.Text>\n               <b>Continent:</b> {data.continent}\n            </Card.Text>\n            <Card.Text>\n               <b>Recovery Rate:</b>{' '}\n               {((data.recovered / data.cases) * 100).toFixed(2)}%\n            </Card.Text>\n            <Card.Text>\n               <b>Death Rate:</b>{' '}\n               {((data.deaths / data.cases) * 100).toFixed(2)}%\n            </Card.Text>\n         </Card.Body>\n      </Card>\n   ))\n\n   var queries = [\n      {\n         columns: 1,\n         query: 'min-width: 250px',\n      },\n      {\n         columns: 2,\n         query: 'min-width: 600px',\n      },\n      {\n         columns: 3,\n         query: 'min-width: 1000px',\n      },\n   ]\n\n   return (\n      <div>\n         <br />\n         <h2 style={{ textAlign: 'center' }}>Covid-19 Live Stats!!</h2>\n         <br />\n\n         <CardDeck>\n            <Card\n               bg='secondary'\n               text='white'\n               className='text-center'\n               style={{ margin: '10px' }}\n            >\n               <Card.Body>\n                  <Card.Title>Cases</Card.Title>\n                  <Card.Text>{summary.cases}</Card.Text>\n               </Card.Body>\n               <Card.Footer>\n                  <small>Last updated : {lastUpdated}</small>\n               </Card.Footer>\n            </Card>\n            <Card\n               bg='danger'\n               text='white'\n               className='text-center'\n               style={{ margin: '10px' }}\n            >\n               <Card.Body>\n                  <Card.Title>Deaths</Card.Title>\n                  <Card.Text>{summary.deaths}</Card.Text>\n               </Card.Body>\n               <Card.Footer>\n                  <small>Last updated : {lastUpdated}</small>\n               </Card.Footer>\n            </Card>\n            <Card\n               bg='success'\n               text='white'\n               className='text-center'\n               style={{ margin: '10px' }}\n            >\n               <Card.Body>\n                  <Card.Title>Recovered</Card.Title>\n                  <Card.Text>{summary.recovered}</Card.Text>\n               </Card.Body>\n               <Card.Footer>\n                  <small>Last updated : {lastUpdated}</small>\n               </Card.Footer>\n            </Card>\n         </CardDeck>\n         <br />\n         <br />\n         <Form>\n            <Row>\n               <Col>\n                  <Form.Control\n                     column\n                     sm='6'\n                     type='text'\n                     onChange={(e) =>\n                        setInputCountry(e.target.value.toUpperCase())\n                     }\n                     placeholder='Search a Country'\n                  ></Form.Control>\n               </Col>\n               <Col>\n                  <Form.Control\n                     column\n                     sm='6'\n                     type='text'\n                     onChange={(e) =>\n                        setInputContinent(e.target.value.toUpperCase())\n                     }\n                     placeholder='Search a Continent'\n                  ></Form.Control>\n               </Col>\n            </Row>\n         </Form>\n\n         {countryData.length > 0 && (\n            <Columns queries={queries}>{countryCards}</Columns>\n         )}\n      </div>\n   )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}